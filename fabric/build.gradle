plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_api_version}"

    testImplementation project(":common")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    var rep_properties = [
            "version"              : rootProject.version,
            "fabric_loader_version": rootProject.fabric_loader_version,
            "minecraft_version"    : rootProject.minecraft_version,
            "java_version"         : rootProject.java_version
    ]

    inputs.properties rep_properties

    filesMatching('fabric.mod.json') {
        expand rep_properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.maven_group
            artifactId = rootProject.archives_name + "-" + project.name
            version = rootProject.minecraft_version + "-" + rootProject.mod_version

            pom {
                name = "VoidLib [Fabric]"
                description = "A lib that adds various utilities to mod development"
                url = "https://github.com/Infinituum17/VoidLib"
                scm {
                    url = "https://github.com/Infinituum17/VoidLib"
                    connection = "scm:git:git://github.com/Infinituum17/VoidLib.git"
                    developerConnection = "scm:git:git@github.com:Infinituum17/VoidLib.git"
                }
                issueManagement {
                    system = "github"
                    url = "https://github.com/Infinituum17/VoidLib/issues"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://spdx.org/licenses/MIT.html"
                    }
                }
                developers {
                    developer {
                        id = "infinituum17"
                        name = "infinituum17"
                    }
                }
            }

            from components.java
        }
    }

    repositories {
        maven {
            name = "InfinituumModResources"
            url "file://" + System.getenv("MOD_RESOURCES").toString() + "/maven"
        }
    }
}

test {
    useJUnitPlatform()
}
